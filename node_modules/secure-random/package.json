{
  "_from": "secure-random@^1.1.2",
  "_id": "secure-random@1.1.2",
  "_inBundle": false,
  "_integrity": "sha512-H2bdSKERKdBV1SwoqYm6C0y+9EA94v6SUBOWO8kDndc4NoUih7Dv6Tsgma7zO1lv27wIvjlD0ZpMQk7um5dheQ==",
  "_location": "/secure-random",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "secure-random",
    "fetchSpec": "^1.1.2",
    "name": "secure-random",
    "raw": "secure-random@^1.1.2",
    "rawSpec": "^1.1.2",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/secure-random/-/secure-random-1.1.2.tgz",
  "_shasum": "ed103b460a851632d420d46448b2a900a41e7f7c",
  "_spec": "secure-random@^1.1.2",
  "_where": "/mnt/c/Users/leowa/Desktop/GoogleDrive/PoRT-Blockchain",
  "author": {
    "name": "JP Richardson"
  },
  "browser": {
    "crypto": false
  },
  "bugs": {
    "url": "https://github.com/jprichardson/secure-random/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Normalize the creation of cryptographically strong random values.",
  "devDependencies": {
    "mocha": "^1.20.0",
    "mochify": "^0.9.3",
    "terst": "^0.1.0"
  },
  "homepage": "https://github.com/jprichardson/secure-random#readme",
  "keywords": [
    "crypto",
    "cryptography",
    "generator",
    "number",
    "rand",
    "random",
    "secure"
  ],
  "license": "MIT",
  "main": "./lib/secure-random.js",
  "name": "secure-random",
  "optionalDependencies": {},
  "readme": "secure-random\n==============\n\n[![build status](https://secure.travis-ci.org/jprichardson/secure-random.png)](http://travis-ci.org/jprichardson/secure-random)\n\n[![browser support](https://ci.testling.com/jprichardson/secure-random.png)](https://ci.testling.com/jprichardson/secure-random)\n\nA simple JavaScript component to normalize the creation of cryptographically strong random values.\n\n\nWhy?\n----\n\nContext switching between the browser and Node.js and creating cryptographically secure random numbers is annoying. This normalizes the behavior. Used by [CryptoCoinJS](http://cryptocoinjs.com) and [BitcoinJS](https://github.com/bitcoinjs/bitcoinjs-lib).\n\n\n\nInstall\n-------\n\n### Node.js/Browserify\n\n    npm install --save secure-random\n\n\n### Component\n\n    component install jprichardson/secure-random\n\n\n### Bower\n\n    bower install secure-random\n\n\n### Script\n\n```html\n<script src=\"/path/to/secure-random.js\"></script>\n```\n\n\nUsage\n-----\n\n### secureRandom(byteCount, options)\n\n- **byteCount**: is the number of bytes to return. \n- **options**: options to pass. Only valid value at this time `type`. `type` can be\neither `Array`, `Uint8Array`, or `Buffer`. `Buffer` is only valid in Node.js or \n[Browserify](https://github.com/substack/node-browserify) environments - it will throw an error otherwise.\n\n\nreturn an `Array`:\n\n```js\nvar bytes = secureRandom(10) //return an Array of 10 bytes\nconsole.log(bytes.length) //10\n```\n\nor:\n\n```js\nvar bytes = secureRandom(10, {type: 'Array'}) //return an Array of 10 bytes\nconsole.log(bytes.length) //10\n```\n\nreturn a `Buffer`:\n\n```js\nvar bytes = secureRandom(10, {type: 'Buffer'}) //return a Buffer of 10 bytes\nconsole.log(bytes.length) //10\n```\n\nreturn a `Uint8Array`:\n\n```js\nvar bytes = secureRandom(10, {type: 'Uint8Array'}) //return a Uint8Array of 10 bytes\nconsole.log(bytes.length) //10\n```\n\n### randomArray(byteCount)\n\nSugar for `secureRandom(byteCount, {type: 'Array'})`.\n\n```js\nvar secureRandom = require('secure-random')\nvar data = secureRandom.randomArray(10)\n```\n\n### randomUint8Array(byteCount)\n\nSugar for `secureRandom(byteCount, {type: 'Uint8Array'})`.\n\n```js\nvar secureRandom = require('secure-random')\nvar data = secureRandom.randomUint8Array(10)\n```\n\n### randomBuffer(byteCount)\n\nSugar for `secureRandom(byteCount, {type: 'Buffer'})`.\n\n```js\nvar secureRandom = require('secure-random')\nvar data = secureRandom.randomBuffer(10)\n```\n\nHandling Errors\n-----\n\nAn error will be thrown if a secure random number generator is not available.\n\n```javascript\nthrow new Error(\"Your browser does not support window.crypto.\")\n```\n\nReferences\n----------\n* [Node.js crypto.randomBytes()](http://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* [Node.js Buffer](http://nodejs.org/api/buffer.html)\n* [window.crypto.getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues)\n* [JavaScript typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays)\n\n\nLicense\n-------\n\n(MIT License)\n\nCopyright 2013-2014, JP Richardson\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jprichardson/secure-random.git"
  },
  "scripts": {
    "test": "mocha --ui bdd",
    "unit": "mocha"
  },
  "testling": {
    "browsers": [
      "android-browser/4.2..latest",
      "chrome/latest",
      "firefox/latest",
      "ie/9..latest",
      "iphone/6.0..latest",
      "safari/6..latest"
    ],
    "files": "test/*.js"
  },
  "version": "1.1.2"
}
