{
  "_from": "sha256@^0.2.0",
  "_id": "sha256@0.2.0",
  "_inBundle": false,
  "_integrity": "sha1-c6C0GNqrcDW/+G6EkeNjQS/CqwU=",
  "_location": "/sha256",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "sha256",
    "fetchSpec": "^0.2.0",
    "name": "sha256",
    "raw": "sha256@^0.2.0",
    "rawSpec": "^0.2.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sha256/-/sha256-0.2.0.tgz",
  "_shasum": "73a0b418daab7035bff86e8491e363412fc2ab05",
  "_spec": "sha256@^0.2.0",
  "_where": "/mnt/c/Users/leowa/Desktop/GoogleDrive/PoRT-Blockchain",
  "browser": "./lib/sha256.js",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/sha256/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "convert-hex": "~0.1.0",
    "convert-string": "~0.1.0"
  },
  "deprecated": false,
  "description": "Compute SHA256 of bytes or strings.",
  "devDependencies": {
    "mocha": "1.*",
    "terst": "0.0.1"
  },
  "homepage": "https://github.com/cryptocoinjs/sha256#readme",
  "keywords": [
    "bytes",
    "cryptography",
    "sha256",
    "string",
    "strings"
  ],
  "main": "./lib/nodecrypto.js",
  "name": "sha256",
  "optionalDependencies": {},
  "readme": "# sha256\n\nJavaScript component to compute the SHA256 of strings or bytes.\n\n## DEPRECATION NOTICE\n\nThis library is deprecated. If you think it's important to maintain this library, please submit an issue and the case will be consider or the repo / ownership will be transferred to you. Viable alternatives:\n\n1. Use Browserify\n2. https://www.npmjs.com/package/sha.js (used by Browserify)\n3. https://github.com/indutny/hash.js\n\n\n## Install\n\n### Node.js/Browserify\n\n    npm install --save sha256\n\nNote: when Node.js is detected, the Node [`Crypto`](http://nodejs.org/api/crypto.html) component is used instead of re-implementing the SHA256 hash logic.\n\n\n\n## Usage\n\nThere are two methods, one for computing the hash of the input, and one for double-hashing it:\n\n```js\nsha256('hello');   // \"2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\"\nsha256.x2('hello'); // \"d7914fe546b684688bb95f4f888a92dfc680603a75f23eb823658031fff766d9\"\n```\n\nInput is either an array of bytes or a string. **String are always interpreted as binary data**; if you have a hex-encoded string of data to parse, first convert it to a binary string or array of bytes.\n\nOutput by default is a hexadecimal-encoded string. Other options are an array of bytes, or a binary-encoded string:\n\n```js\nsha256('hello');   // \"2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\" <= Hex-encoded; default\nsha256('hello', { asBytes: true }); // [44,242,77,186,95,176,163,14,38,232,59,42,197,185,226,158,27,22,30,92,31,167,66,94,115,4,51,98,147,139,152,36] <= Array of bytes\nsha256('hello', { asString: true }); // \",òMº_°£&è;*Å¹â\\§B^s3b$\" <= Binary-encoded string\n```\n\n## Test\n\nUnit tests are written in [Mocha](http://visionmedia.github.io/mocha/). To run the test suite, checkout the git repository, and from within the base folder run:\n\n```sh\n$ npm install --dev\n$ npm test\n```\n\n# Credits\n\nMost of the code from CryptoJS https://code.google.com/p/crypto-js/\n\n# License\n\n(MIT License)\n\nCopyright 2013, JP Richardson  <jprichardson@gmail.com>",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cryptocoinjs/sha256.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.2.0"
}
