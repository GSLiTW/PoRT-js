{
  "_from": "secp256k1",
  "_id": "secp256k1@4.0.2",
  "_inBundle": false,
  "_integrity": "sha512-UDar4sKvWAksIlfX3xIaQReADn+WFnHvbVujpcbr+9Sf/69odMwy2MUsz5CKLQgX9nsIyrjuxL2imVyoNHa3fg==",
  "_location": "/secp256k1",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "secp256k1",
    "fetchSpec": "latest",
    "name": "secp256k1",
    "raw": "secp256k1",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/eth-crypto",
    "/ethereum-cryptography"
  ],
  "_resolved": "https://registry.npmjs.org/secp256k1/-/secp256k1-4.0.2.tgz",
  "_shasum": "15dd57d0f0b9fdb54ac1fa1694f40e5e9a54f4a1",
  "_shrinkwrap": null,
  "_spec": "secp256k1",
  "_where": "/mnt/d/Users/User/Documents/PoRT-Blockchain",
  "author": {
    "email": "mjbecze@gmail.com",
    "name": "Martin Becze"
  },
  "browser": {
    "./index.js": "./elliptic.js"
  },
  "bugs": {
    "url": "https://github.com/cryptocoinjs/secp256k1-node/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Aaron Davis",
      "url": "https://github.com/kumavis"
    },
    {
      "name": "Ian Matyssik",
      "url": "https://github.com/phpb-com"
    },
    {
      "name": "Kagami Hiiragi",
      "email": "kagami@genshiken.org",
      "url": "http://kagami.genshiken.org/"
    },
    {
      "name": "ethers",
      "url": "https://github.com/ethers"
    },
    {
      "name": "Kirill Fomichev",
      "email": "fanatid@ya.ru",
      "url": "https://github.com/fanatid"
    }
  ],
  "dependencies": {
    "elliptic": "^6.5.2",
    "node-addon-api": "^2.0.0",
    "node-gyp-build": "^4.2.0"
  },
  "deprecated": false,
  "description": "This module provides native bindings to ecdsa secp256k1 functions",
  "devDependencies": {},
  "engines": {
    "node": ">=10.0.0"
  },
  "gypfile": true,
  "homepage": "https://github.com/cryptocoinjs/secp256k1-node#readme",
  "keywords": [
    "ec",
    "ecdh",
    "ecdsa",
    "secp256k1"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "secp256k1",
  "optionalDependencies": {},
  "readme": "# secp256k1-node\n\nThis module provides native bindings to [bitcoin-core/secp256k1](https://github.com/bitcoin-core/secp256k1). In browser [elliptic](https://github.com/indutny/elliptic) will be used as fallback.\n\nWorks on node version 10.0.0 or greater, because use [N-API](https://nodejs.org/api/n-api.html).\n\n## Installation\n\n##### from npm\n\n`npm install secp256k1`\n\n##### from git\n\n```\ngit clone git@github.com:cryptocoinjs/secp256k1-node.git\ncd secp256k1-node\ngit submodule update --init\nnpm install\n```\n\n##### Windows\n\nThe easiest way to build the package on windows is to install [windows-build-tools](https://github.com/felixrieseberg/windows-build-tools).\n\nOr install the following software:\n\n  * Git: https://git-scm.com/download/win\n  * nvm: https://github.com/coreybutler/nvm-windows\n  * Python 2.7: https://www.python.org/downloads/release/python-2712/\n  * Visual C++ Build Tools: http://landinghub.visualstudio.com/visual-cpp-build-tools (Custom Install, and select both Windows 8.1 and Windows 10 SDKs)\n\nAnd run commands:\n\n```\nnpm config set msvs_version 2015 --global\nnpm install npm@next -g\n```\n\nBased on:\n\n  * https://github.com/nodejs/node-gyp/issues/629#issuecomment-153196245\n  * https://github.com/nodejs/node-gyp/issues/972\n\n## Usage\n\n* [API Reference (v4.x)](API.md) (current version)\n* [API Reference (v3.x)](https://github.com/cryptocoinjs/secp256k1-node/blob/v3.x/API.md)\n* [API Reference (v2.x)](https://github.com/cryptocoinjs/secp256k1-node/blob/v2.x/API.md)\n\n##### Private Key generation, Public Key creation, signature creation, signature verification\n\n```js\nconst { randomBytes } = require('crypto')\nconst secp256k1 = require('secp256k1')\n// or require('secp256k1/elliptic')\n//   if you want to use pure js implementation in node\n\n// generate message to sign\n// message should have 32-byte length, if you have some other length you can hash message\n// for example `msg = sha256(rawMessage)`\nconst msg = randomBytes(32)\n\n// generate privKey\nlet privKey\ndo {\n  privKey = randomBytes(32)\n} while (!secp256k1.privateKeyVerify(privKey))\n\n// get the public key in a compressed format\nconst pubKey = secp256k1.publicKeyCreate(privKey)\n\n// sign the message\nconst sigObj = secp256k1.ecdsaSign(msg, privKey)\n\n// verify the signature\nconsole.log(secp256k1.ecdsaVerify(sigObj.signature, msg, pubKey))\n// => true\n```\n\n\\* **.verify return false for high signatures**\n\n##### Get X point of ECDH\n\n```js\nconst { randomBytes } = require('crypto')\n// const secp256k1 = require('./elliptic')\nconst secp256k1 = require('./')\n\n// generate privKey\nfunction getPrivateKey () {\n  while (true) {\n    const privKey = randomBytes(32)\n    if (secp256k1.privateKeyVerify(privKey)) return privKey\n  }\n}\n\n// generate private and public keys\nconst privKey = getPrivateKey()\nconst pubKey = secp256k1.publicKeyCreate(getPrivateKey())\n\n// compressed public key from X and Y\nfunction hashfn (x, y) {\n  const pubKey = new Uint8Array(33)\n  pubKey[0] = (y[31] & 1) === 0 ? 0x02 : 0x03\n  pubKey.set(x, 1)\n  return pubKey\n}\n\n// get X point of ecdh\nconst ecdhPointX = secp256k1.ecdh(pubKey, privKey, { hashfn }, Buffer.alloc(33))\nconsole.log(ecdhPointX.toString('hex'))\n```\n\n## LICENSE\n\nThis library is free and open-source software released under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cryptocoinjs/secp256k1-node.git"
  },
  "scripts": {
    "install": "node-gyp-build || exit 0"
  },
  "version": "4.0.2"
}
