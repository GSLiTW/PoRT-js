const Txn_Pool = require('../src/pending_transaction_pool');
const Blockchain = require('../src/blockchain.js');
const MPT = require('../src/MPT');
const fs = require('fs');
const Txn = require('../src/transaction');
const {exec} = require('child_process');
const request = ('supertest');
const fetch = require("node-fetch");
const { resolve } = require('path');
//const app = require('../src/network')
//const http = require('http').createServer(app).listen(3000);



// describe('supertestnetworktest', () => {
// 	//Applies only to tests in this describe block
// 	beforeAll(() => { exec('sh ./run.sh',
//     (error, stdout, stderr) => {
//       console.log(stdout);
//       console.log(stderr);
//       if (error !== null) {
//           console.log(`exec error: ${error}`);
//       }
//     })
// 	});
  
//   test('getBlockChain', () => {
//     request.get('/blockchain').expect("Content-Type", /json/).expect((res) => {
//       console.log(res.body.data);
//       eval(res.body.data[0]) == Blockchain;
//     })
//   })

//   afterAll(() => { exec('sh ./kill.sh',
//     (error, stdout, stderr) => {
//       console.log(stdout);
//       console.log(stderr);
//       if (error !== null) {
//           console.log(`exec error: ${error}`);
//       }
//     })
// 	});
// });

describe('networktest', () => {
	//Applies only to tests in this describe block
	// beforeAll(() => { 
  //   return new Promise(resolve => {
  //     exec('sh ./run.sh',
  //     (error, stdout, stderr) => {
  //       console.log(stdout);
  //       console.log(stderr);
  //       if (error !== null) {
  //         console.log(`exec error: ${error}`);
  //       }
  //     })
  //     resolve();
  //   })
	// });

  beforeAll(async () => { 
      let a = await exec('sh ./run.sh', 
      (error, stdout, stderr) => {
        console.log(stdout);
        console.log(stderr);
        if (error !== null) {
          console.log(`exec error: ${error}`);
        }
      })
	});
  
  test('getBlockChain', () => {
    return fetch('http://localhost:3000/blockchain')
      .then((res) => {
        console.log(res.body.json());
      })
  })

  afterAll(() => { 
    //return new Promise(resolve => {
      exec('sh ./kill.sh',
      (error, stdout, stderr) => {
        console.log(stdout);
        console.log(stderr);
        if (error !== null) {
          console.log(`exec error: ${error}`);
        }
      })
      resolve();
    //})
	});
});
